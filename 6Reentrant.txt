Server.java
package cnclientserver;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

class worker implements Runnable 
{ 
  String name; 
  ReentrantLock re; 
  public worker(ReentrantLock rl, String n) 
  { 
    re = rl; 
    name = n; 
  } 
  public void run() 
  { 
    boolean done = false; 
    while (!done) 
    { 
      //Getting Outer Lock 
      boolean ans = re.tryLock(); 
  
      // Returns True if lock is free 
      if(ans) 
      { 
        try
        { 
          Date d = new Date(); 
          SimpleDateFormat ft = new SimpleDateFormat("hh:mm:ss"); 
          System.out.println("task name - "+ name 
                     + " outer lock acquired at "
                     + ft.format(d) 
                     + " Doing outer work"); 
          Thread.sleep(1500); 
  
          // Getting Inner Lock 
          re.lock(); 
          try
          { 
            d = new Date(); 
            ft = new SimpleDateFormat("hh:mm:ss"); 
            System.out.println("task name - "+ name 
                       + " inner lock acquired at "
                       + ft.format(d) 
                       + " Doing inner work"); 
            System.out.println("Lock Hold Count - "+ re.getHoldCount()); 
            Thread.sleep(1500); 
          } 
          catch(InterruptedException e) 
          { 
            e.printStackTrace(); 
          } 
          finally
          { 
            //Inner lock release 
            System.out.println("task name - " + name + 
                       " releasing inner lock"); 
  
            re.unlock(); 
          } 
          System.out.println("Lock Hold Count - " + re.getHoldCount()); 
          System.out.println("task name - " + name + " work done"); 
  
          done = true; 
        } 
        catch(InterruptedException e) 
        { 
          e.printStackTrace(); 
        } 
        finally
        { 
          //Outer lock release 
          System.out.println("task name - " + name + 
                     " releasing outer lock"); 
  
          re.unlock(); 
          System.out.println("Lock Hold Count - " + 
                       re.getHoldCount()); 
        } 
      } 
      else
      { 
        System.out.println("task name - " + name + 
                      " waiting for lock"); 
        try
        { 
          Thread.sleep(1000); 
        } 
        catch(InterruptedException e) 
        { 
          e.printStackTrace(); 
        } 
      } 
    } 
  } 
}
public class MUltiServer 
{
    public static void main(String[] args) 
    {
        ReentrantLock rel = new ReentrantLock(); //internal classs
    ExecutorService pool = Executors.newFixedThreadPool(2); 
   
     
        try 
        {
            int count=0;
            ServerSocket s1 = new ServerSocket(1234);
            while(true)
            {
                count++;
                Socket s3 = s1.accept();
                String ss = "Client"+count;
                pool.execute(new worker(rel, ss)); 
            }
               
    }
    catch (IOException ex) 
                {
                    //Logger.getLogger(ServerClient_Server.class.getName()).log(Level.SEVERE, null, ex);
                }
    pool.shutdown();
    }
}

Client.java
package cnclientserver;

import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

public class MultiClient {
    
    public static void main(String[] args) {
    int port = 1234;
    Socket s1;
    try 
        {
            s1 = new Socket("localhost", port);
            System.out.println("ACCEPTED");
            s1 = new Socket("localhost", port);
            System.out.println("ACCEPTED");
            s1 = new Socket("localhost", port);
            System.out.println("ACCEPTED");
            s1 = new Socket("localhost", port);
            System.out.println("ACCEPTED");


        } 
        catch (UnknownHostException ex) {
   } catch (IOException ex) { }
        System.out.println("CONNECTION ENDED");
    }
}
